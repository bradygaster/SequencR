@page "/"
@using Microsoft.AspNetCore.SignalR.Client
@using SequencR.Client.Infrastructure
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@implements IDisposable

<div class="main">
    <div class="top-row px-4">
        <strong>SequencR</strong>
        <span style="padding-left: 10px;">@connectionState</span>
        <span style="padding-left: 10px;">@CurrentStep</span>
    </div>

    <div class="content">
        <div class="card-deck">
            <div class="card text-center card-controls">
                <div class="card-header">
                    Controls
                </div>
                <ul class="list-group list-group-flush">
                    <li class="list-group-item">
                        BPM @BPM
                    </li>
                    <li class="list-group-item">
                        <input type="text" class="dial"
                               @bind-value="@BPM"
                               @bind-value:event="oninput"
                               data-min="50"
                               data-max="250"
                               data-displayInput="true"
                               data-width="120"
                               data-thickness=".2">
                    </li>
                    <li class="list-group-item">
                        <button type="button" class="btn btn-success" @onclick="Start">Start</button>
                    </li>
                    <li class="list-group-item">
                        <button type="button" class="btn btn-danger" @onclick="Stop">Stop</button>
                    </li>
                </ul>
            </div>
            @for (int step = 0; step < 9; step++)
            {
                if (step > 0)
                {
                    <div class="card text-center card-step" data-step="@step">
                        <div class="card-header">
                            @step
                        </div>
                        <ul class="list-group list-group-flush">
                            @foreach (var pad in pads)
                            {
                                <li class="list-group-item">
                                    <button type="button" class="btn btn-secondary">Off</button>
                                </li>
                            }
                        </ul>
                    </div>
                }
                else
                {
                    <div class="card text-center">
                        <div class="card-header">
                            Instruments
                        </div>
                        <ul class="list-group list-group-flush">
                            @for (int index = 0; index < pads.Length; index++)
                            {
                                <li class="list-group-item">
                                    <button type="button"
                                            class="btn btn-secondary btn-instrument"
                                            onclick="@sounds[index]">@pads[index]</button>
                                </li>
                            }
                        </ul>
                    </div>
                }
            }
        </div>
    </div>
</div>

@code {
    HubConnection hubConnection;
    string connectionState = "Disconnected";
    int BPM = 120;
    int CurrentStep = 0;
    string[] pads = {
        "Bass", 
        "Snare", 
        "Hi Tom", 
        "Mid Tom", 
        "Low Tom", 
        "Closed Hat", 
        "Open Hat", 
        "Clap"
    };
    string[] sounds = {
        "sound.playBass()",
        "sound.playSnare()",
        "sound.playHiTom()",
        "sound.playMidTom()",
        "sound.playLoTom()",
        "sound.playClosed()",
        "sound.playOpen()",
        "sound.playClap()",
    };

    DotNetObjectReference<BpmHelper> dotNetObject;

    protected async Task Start()
    {
        await hubConnection.SendAsync("StartSequencerAsync");
    }

    protected async Task Stop()
    {
        await hubConnection.SendAsync("StopSequencerAsync");
    }

    protected async override Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(new Uri("http://localhost:4000/sequencerHub"))
            .WithAutomaticReconnect(new TimeSpan[] {
                TimeSpan.FromSeconds(0),
                TimeSpan.FromSeconds(0),
                TimeSpan.FromSeconds(5),
                TimeSpan.FromSeconds(8),
                TimeSpan.FromSeconds(10),
                TimeSpan.FromSeconds(15),
                TimeSpan.FromSeconds(30)
                })
            .Build();

        hubConnection.On<int>("MovedToStep", async (step) =>
        {
            await JSRuntime.InvokeVoidAsync("moveToStep", step);
        });

        hubConnection.On<int>("BpmSet", (bpm) =>
        {
            BPM = bpm;
            StateHasChanged();
        });

        hubConnection.Reconnecting += (error) =>
        {
            connectionState = hubConnection.State.ToString();
            StateHasChanged();
            return Task.CompletedTask;
        };

        hubConnection.Reconnected += (connectionId) =>
        {
            connectionState = hubConnection.State.ToString();
            StateHasChanged();
            return Task.CompletedTask;
        };

        hubConnection.Closed += (error) =>
        {
            connectionState = hubConnection.State.ToString();
            StateHasChanged();
            return Task.CompletedTask;
        };

        await hubConnection.StartAsync().ContinueWith((o) =>
        {
            connectionState = hubConnection.State.ToString();
            StateHasChanged();
        });

        await JSRuntime.InvokeVoidAsync("init", BPM);

        dotNetObject =
            DotNetObjectReference.Create(new BpmHelper(hubConnection));

        await JSRuntime.InvokeAsync<string>(
            "bpmFunctions.wireUp",
            dotNetObject);
    }

    public void Dispose()
    {
        dotNetObject?.Dispose();
    }
}