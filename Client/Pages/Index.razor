@page "/"
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<div class="card-group">
    <div class="card text-center card-controls">
        <div class="card-header">
            Controls
        </div>
        <li class="list-group-item">
            BPM
        </li>
        <div class="card-body">
            <input type="text" class="dial" value="@BPM" data-min="50" data-max="200" data-width="120" data-thickness=".1">
        </div>
        <li class="list-group-item">
            <button type="button" class="btn btn-success" @onclick="Start">Start</button>
        </li>
        <li class="list-group-item">
            <button type="button" class="btn btn-danger" @onclick="Stop">Stop</button>
        </li>
    </div>
@for (int step = 0; step < 9; step++)
{
    if(step > 0)
    {
        <div class="card text-center" data-step="@step">
            <div class="card-header">
                @step
            </div>
            <ul class="list-group list-group-flush">
                @foreach (var pad in pads)
                {
                    <li class="list-group-item">
                        <button type="button" class="btn btn-secondary">Off</button>
                    </li>
                }
            </ul>
        </div>
    }
    else
    {
        <div class="card text-center">
            <div class="card-header">
                Instruments
            </div>
            <ul class="list-group list-group-flush">
                @foreach (var pad in pads)
                {
                    <li class="list-group-item">
                        <button type="button" class="btn btn-secondary btn-instrument">@pad</button>
                    </li>
                }
            </ul>
        </div>
    }
}
</div>
@uri
@code {
    int BPM = 120;
    int CurrentStep = 0;
    string[] pads = { 
        "Bass", "Snare", "Hi Tom", "Mid Tom", "Low Tom", "Closed Hat", "Open Hat", "Clap"
    };
    HubConnection hubConnection;
    string uri;

    protected override async Task OnInitializedAsync()
    {
        uri = NavigationManager.ToAbsoluteUri("/sequencrHub").ToString();

        hubConnection = new HubConnectionBuilder()  
            .WithUrl(new Uri(uri))
            .Build();

/*
        hubConnection.On<int>("MovedToStep", 
            async (step) =>
            {
                CurrentStep = step;
                await JSRuntime.InvokeVoidAsync("moveToStep", CurrentStep);
                StateHasChanged();
            });
*/ 

        //await hubConnection.StartAsync();

        await JSRuntime.InvokeVoidAsync("init", BPM);
    }

    protected async Task Start()
    {
        //await hubConnection.SendAsync("StartSequencerAsync");
    }

    protected async Task Stop()
    {
        //await hubConnection.SendAsync("StopSequencerAsync");
    }
}